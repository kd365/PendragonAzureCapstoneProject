{
	"name": "GET Until Next Token",
	"properties": {
		"activities": [
			{
				"name": "Query",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Query",
					"value": "\"NATO\" lang:en -is:retweet -is:reply"
				}
			},
			{
				"name": "Max Results",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "max_results",
					"value": "100"
				}
			},
			{
				"name": "Tweet Fields",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Tweet Fields",
					"value": "id,text,created_at,lang,public_metrics"
				}
			},
			{
				"name": "Delete Previous Output Files",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Query",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Max Results",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Tweet Fields",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Raw_Aithusa_Outputs",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Delete Previous Merged Output files",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Query",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Merged_Aithusa_JSON_folder",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Until GET Tweets",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('stopUntil')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Extract Next Token Aithusa",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('Extract Next Token Aithusa').output.runStatus.output.sink1.value[0].next_token, '\\n')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set stopUntil true",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "stopUntil",
											"value": true
										}
									}
								]
							}
						},
						{
							"name": "Extract Next Token Aithusa",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "Get Next Token for Aithusa",
									"type": "DataFlowReference"
								},
								"integrationRuntime": {
									"referenceName": "WarmIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								},
								"traceLevel": "None",
								"cacheSinks": {
									"firstRowOnly": true
								}
							}
						},
						{
							"name": "If specific date with token",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Delete Temp File_copy2",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('specific_date')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "GET Past 7 Days with token",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "RestSource",
												"httpRequestTimeout": "00:01:40",
												"requestInterval": "00.00:00:00.010",
												"requestMethod": "GET",
												"paginationRules": {
													"supportRFC5988": "true"
												}
											},
											"sink": {
												"type": "JsonSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "JsonWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "RestResource_Aithusa_7days_NextToken",
												"type": "DatasetReference",
												"parameters": {
													"query": {
														"value": "@variables('Query')",
														"type": "Expression"
													},
													"tweet_fields": {
														"value": "@variables('Tweet Fields')",
														"type": "Expression"
													},
													"max_results": {
														"value": "@variables('max_results')",
														"type": "Expression"
													},
													"next_token": {
														"value": "@activity('Extract Next Token Aithusa').output.runStatus.output.sink1.value[0].next_token",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "json_Aithusa",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Set variable3",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "GET Past 7 Days with token",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "stopUntil",
											"value": true
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "GET with specifc date with token",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "RestSource",
												"httpRequestTimeout": "00:01:40",
												"requestInterval": "00.00:00:00.010",
												"requestMethod": "GET",
												"paginationRules": {
													"supportRFC5988": "true"
												}
											},
											"sink": {
												"type": "JsonSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "JsonWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "RestResource_Aithusa_withToken",
												"type": "DatasetReference",
												"parameters": {
													"Query": {
														"value": "@variables('Query')",
														"type": "Expression"
													},
													"max_results": {
														"value": "@variables('max_results')",
														"type": "Expression"
													},
													"tweet_fields": {
														"value": "@variables('Tweet Fields')",
														"type": "Expression"
													},
													"start_year": {
														"value": "@variables('start_year')",
														"type": "Expression"
													},
													"start_month": {
														"value": "@variables('start_month')",
														"type": "Expression"
													},
													"start_day": {
														"value": "@variables('start_day')",
														"type": "Expression"
													},
													"start_hour": {
														"value": "@variables('start_hour')",
														"type": "Expression"
													},
													"start_minute": {
														"value": "@variables('start_minute')",
														"type": "Expression"
													},
													"start_second": "00",
													"end_year": {
														"value": "@variables('end_year')",
														"type": "Expression"
													},
													"end_month": {
														"value": "@variables('end_month')",
														"type": "Expression"
													},
													"end_day": {
														"value": "@variables('end_day')",
														"type": "Expression"
													},
													"end_hour": {
														"value": "@variables('end_hour')",
														"type": "Expression"
													},
													"end_minute": {
														"value": "@variables('end_minute')",
														"type": "Expression"
													},
													"end_second": "00",
													"next_token": {
														"value": "@activity('Extract Next Token Aithusa').output.runStatus.output.sink1.value[0].next_token",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "json_Aithusa",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Set variable2",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "GET with specifc date with token",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "stopUntil",
											"value": true
										}
									}
								]
							}
						},
						{
							"name": "Delete Temp File_copy2",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "If Condition1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "json_Aithusa",
									"type": "DatasetReference"
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "Set variable4",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Extract Next Token Aithusa",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "stopUntil",
								"value": true
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "If specific date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "stopUntil",
					"value": false
				}
			},
			{
				"name": "Delete NATO Temp file",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Until GET Tweets",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "json_Aithusa",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Merge JSONs and Convert to CSV",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Delete NATO Temp file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "Merge JSONs and Convert to CSV for Aithusa",
						"type": "DataFlowReference"
					},
					"integrationRuntime": {
						"referenceName": "WarmIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "End year",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_year",
					"value": "2023"
				}
			},
			{
				"name": "End month",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "End year",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_month",
					"value": "04"
				}
			},
			{
				"name": "End day",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "End month",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_day",
					"value": "07"
				}
			},
			{
				"name": "End hour",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "End day",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_hour",
					"value": "08"
				}
			},
			{
				"name": "End minute",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "End hour",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_minute",
					"value": "00"
				}
			},
			{
				"name": "Start year",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_year",
					"value": "2023"
				}
			},
			{
				"name": "Start month",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Start year",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_month",
					"value": "04"
				}
			},
			{
				"name": "Start day",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Start month",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_day",
					"value": "07"
				}
			},
			{
				"name": "Start hour",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Start day",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_hour",
					"value": "00"
				}
			},
			{
				"name": "Start minute",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Start hour",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_minute",
					"value": "00"
				}
			},
			{
				"name": "Use date range",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Start minute",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "End minute",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "specific_date",
					"value": true
				}
			},
			{
				"name": "If specific date",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Delete Previous Merged Output files",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Delete Previous Output Files",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Use date range",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('specific_date')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Initial GET Past 7 Days",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "RestResource_Aithusa_7days",
									"type": "DatasetReference",
									"parameters": {
										"query": {
											"value": "@variables('Query')",
											"type": "Expression"
										},
										"tweet_fields": {
											"value": "@variables('Tweet Fields')",
											"type": "Expression"
										},
										"max_results": {
											"value": "@variables('max_results')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "json_Aithusa",
									"type": "DatasetReference"
								}
							]
						}
					],
					"ifTrueActivities": [
						{
							"name": "Initial GET with specifc date",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "RestResource_Aithusa",
									"type": "DatasetReference",
									"parameters": {
										"Query": {
											"value": "@variables('Query')",
											"type": "Expression"
										},
										"max_results": {
											"value": "@variables('max_results')",
											"type": "Expression"
										},
										"tweet_fields": {
											"value": "@variables('Tweet Fields')",
											"type": "Expression"
										},
										"start_year": {
											"value": "@variables('start_year')",
											"type": "Expression"
										},
										"start_month": {
											"value": "@variables('start_month')",
											"type": "Expression"
										},
										"start_day": {
											"value": "@variables('start_day')",
											"type": "Expression"
										},
										"start_hour": {
											"value": "@variables('start_hour')",
											"type": "Expression"
										},
										"start_minute": {
											"value": "@variables('start_minute')",
											"type": "Expression"
										},
										"start_second": "00",
										"end_year": {
											"value": "@variables('end_year')",
											"type": "Expression"
										},
										"end_month": {
											"value": "@variables('end_month')",
											"type": "Expression"
										},
										"end_day": {
											"value": "@variables('end_day')",
											"type": "Expression"
										},
										"end_hour": {
											"value": "@variables('end_hour')",
											"type": "Expression"
										},
										"end_minute": {
											"value": "@variables('end_minute')",
											"type": "Expression"
										},
										"end_second": "00"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "json_Aithusa",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "Copy data to Dedicated SQL Pool",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Delete All Existing Rows in NATO_Tweets1 Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFileName": "*",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "SqlPoolSink",
						"allowCopyCommand": true
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "id",
									"type": "Int64"
								},
								"sink": {
									"name": "id",
									"type": "Int64"
								}
							},
							{
								"source": {
									"name": "created_at",
									"type": "DateTime"
								},
								"sink": {
									"name": "created_at",
									"type": "DateTime"
								}
							},
							{
								"source": {
									"name": "text",
									"type": "String"
								},
								"sink": {
									"name": "text",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "lang",
									"type": "String"
								},
								"sink": {
									"name": "lang",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "retweet_count",
									"type": "Int32"
								},
								"sink": {
									"name": "retweet_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "reply_count",
									"type": "Int32"
								},
								"sink": {
									"name": "reply_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "like_count",
									"type": "Int32"
								},
								"sink": {
									"name": "like_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "quote_count",
									"type": "Int32"
								},
								"sink": {
									"name": "quote_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "impression_count",
									"type": "Int32"
								},
								"sink": {
									"name": "impression_count",
									"type": "Int32"
								}
							}
						]
					}
				},
				"inputs": [
					{
						"referenceName": "Merged_output_csv_Aithusa",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DedicatedSqlPoolTable1_Aithusa",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Turn on SQL Pool",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Merge JSONs and Convert to CSV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PauseResumeSQLPool",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PauseorResume": "resume"
					}
				}
			},
			{
				"name": "Turn off SQL Pool",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "NLP Analysis",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ArchiveTweets",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PauseResumeSQLPool",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PauseorResume": "pause"
					}
				}
			},
			{
				"name": "Delete All Existing Rows in NATO_Tweets1 Table",
				"type": "SqlPoolStoredProcedure",
				"dependsOn": [
					{
						"activity": "Turn on SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"sqlPool": {
					"referenceName": "SQLPoolTest",
					"type": "SqlPoolReference"
				},
				"typeProperties": {
					"storedProcedureName": "[dbo].[delete_all_rows]",
					"storedProcedureParameters": {
						"table_name": {
							"value": "[dbo].[NATO_Tweets1_Aithusa]",
							"type": "String"
						}
					}
				}
			},
			{
				"name": "NLP Analysis",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Copy data to Dedicated SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NLP_Analysis",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"TopicModelingOutputTable": {
							"value": "@concat('Topic.',pipeline().parameters.QueryName,'_Topics')",
							"type": "Expression"
						},
						"SentimentOutputTable": {
							"value": "@concat('Sent.',pipeline().parameters.QueryName,'_Sentiment')",
							"type": "Expression"
						},
						"SummarizationOutputTable": {
							"value": "@concat('sum.',pipeline().parameters.QueryName,'_Abstractive_Sum')",
							"type": "Expression"
						},
						"NEROutputTable": {
							"value": "@concat('NER.',pipeline().parameters.QueryName,'_NER')",
							"type": "Expression"
						},
						"TopicModelingWordsOutputTable": {
							"value": "@concat('Words.',pipeline().parameters.QueryName,'_Topic_Words')",
							"type": "Expression"
						},
						"TopicModelingTableSQL": {
							"value": "@concat('[Topic].[',pipeline().parameters.QueryName,'_Topics]')",
							"type": "Expression"
						},
						"TopicModelingWordsTableSQL": {
							"value": "@concat('[Words].[',pipeline().parameters.QueryName,'_Topic_Words]')",
							"type": "Expression"
						},
						"SentimentTableSQL": {
							"value": "@concat('[Sent].[',pipeline().parameters.QueryName,'_Sentiment]')",
							"type": "Expression"
						},
						"SummarizationTableSQL": {
							"value": "@concat('[sum].[',pipeline().parameters.QueryName,'_Abstractive_Sum]')",
							"type": "Expression"
						},
						"NERTableSQL": {
							"value": "@concat('[NER].[',pipeline().parameters.QueryName,'_NER]')",
							"type": "Expression"
						},
						"TableName": {
							"value": "@concat('dbo.NATO_Tweets1_',pipeline().parameters.QueryName)",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "ArchiveTweets",
				"description": "Adds \"query\" and \"pull_datetime\" columns. query value is defined by the pipeline parameter. Pull_datetime is the current timestamp.",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Copy data to Dedicated SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "ArchiveTweets",
						"type": "NotebookReference"
					},
					"parameters": {
						"query": {
							"value": {
								"value": "@pipeline().parameters.QueryName",
								"type": "Expression"
							},
							"type": "string"
						},
						"maintable": {
							"value": "dbo.NATO_Tweets1_Aithusa",
							"type": "string"
						},
						"archivetable": {
							"value": {
								"value": "@pipeline().parameters.TweetArchive",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "SparkPoolSmall",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"driverSize": "Small",
					"numExecutors": null
				}
			}
		],
		"parameters": {
			"QueryName": {
				"type": "string",
				"defaultValue": "Aithusa"
			},
			"TweetArchive": {
				"type": "string",
				"defaultValue": "Aithusa_Archive_Tweets"
			}
		},
		"variables": {
			"Query": {
				"type": "String"
			},
			"max_results": {
				"type": "String"
			},
			"Tweet Fields": {
				"type": "String"
			},
			"Number of Tweets to Pull": {
				"type": "String"
			},
			"next_token": {
				"type": "String"
			},
			"stopUntil": {
				"type": "Boolean"
			},
			"specific_date": {
				"type": "Boolean"
			},
			"end_year": {
				"type": "String"
			},
			"end_month": {
				"type": "String"
			},
			"end_day": {
				"type": "String"
			},
			"end_hour": {
				"type": "String"
			},
			"end_minute": {
				"type": "String"
			},
			"start_year": {
				"type": "String"
			},
			"start_month": {
				"type": "String"
			},
			"start_day": {
				"type": "String"
			},
			"start_hour": {
				"type": "String"
			},
			"start_minute": {
				"type": "String"
			},
			"table": {
				"type": "String"
			}
		},
		"annotations": []
	}
}