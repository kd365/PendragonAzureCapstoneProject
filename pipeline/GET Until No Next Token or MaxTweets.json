{
	"name": "GET Until No Next Token or MaxTweets",
	"properties": {
		"activities": [
			{
				"name": "Initial GET Past 7 Days into Temp Folder",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Delete Previous Output Files",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Delete Previous Merged Output files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "RestSource",
						"httpRequestTimeout": "00:01:40",
						"requestInterval": "00.00:00:00.010",
						"requestMethod": "GET",
						"paginationRules": {
							"supportRFC5988": "true"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "RestResourceTwitter7days",
						"type": "DatasetReference",
						"parameters": {
							"query": {
								"value": "@pipeline().parameters.Query",
								"type": "Expression"
							},
							"tweet_fields": {
								"value": "@pipeline().parameters.TweetFields",
								"type": "Expression"
							},
							"max_results": {
								"value": "@pipeline().parameters.MaxResults",
								"type": "Expression"
							},
							"EndYear": {
								"value": "@pipeline().parameters.EndYear",
								"type": "Expression"
							},
							"EndMonth": {
								"value": "@pipeline().parameters.EndMonth",
								"type": "Expression"
							},
							"EndDay": {
								"value": "@pipeline().parameters.EndDay",
								"type": "Expression"
							},
							"EndHour": {
								"value": "@pipeline().parameters.EndHour",
								"type": "Expression"
							},
							"EndMinute": {
								"value": "@pipeline().parameters.EndMinute",
								"type": "Expression"
							},
							"StartYear": {
								"value": "@pipeline().parameters.StartYear",
								"type": "Expression"
							},
							"StartMonth": {
								"value": "@pipeline().parameters.StartMonth",
								"type": "Expression"
							},
							"StartDay": {
								"value": "@pipeline().parameters.StartDay",
								"type": "Expression"
							},
							"StartHour": {
								"value": "@pipeline().parameters.StartHour",
								"type": "Expression"
							},
							"StartMinute": {
								"value": "@pipeline().parameters.StartMinute",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Twitter_RawJSON_Temp",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Delete Previous Output Files",
				"type": "Delete",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Raw_Twitter_Outputs",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Delete NATO Temp file",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Pull data until there is no next_token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Twitter_RawJSON_Temp",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Merge JSONs and Convert to CSV",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Delete NATO Temp file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "Merge JSON to CSV",
						"type": "DataFlowReference"
					},
					"integrationRuntime": {
						"referenceName": "WarmIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Delete Previous Merged Output files",
				"type": "Delete",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Merged_JSON_folder",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Copy data to Dedicated SQL Pool",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Delete All Existing Rows in NATO_Tweets1 Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFileName": "*",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "SqlPoolSink",
						"allowCopyCommand": true
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "id",
									"type": "Int64"
								},
								"sink": {
									"name": "id",
									"type": "Int64"
								}
							},
							{
								"source": {
									"name": "created_at",
									"type": "DateTime"
								},
								"sink": {
									"name": "created_at",
									"type": "DateTime"
								}
							},
							{
								"source": {
									"name": "text",
									"type": "String"
								},
								"sink": {
									"name": "text",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "lang",
									"type": "String"
								},
								"sink": {
									"name": "lang",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "retweet_count",
									"type": "Int32"
								},
								"sink": {
									"name": "retweet_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "reply_count",
									"type": "Int32"
								},
								"sink": {
									"name": "reply_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "like_count",
									"type": "Int32"
								},
								"sink": {
									"name": "like_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "quote_count",
									"type": "Int32"
								},
								"sink": {
									"name": "quote_count",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "impression_count",
									"type": "Int32"
								},
								"sink": {
									"name": "impression_count",
									"type": "Int32"
								}
							}
						]
					}
				},
				"inputs": [
					{
						"referenceName": "Merged_output_csv",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DedicatedSqlPoolTable1",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Delete All Existing Rows in NATO_Tweets1 Table",
				"type": "SqlPoolStoredProcedure",
				"dependsOn": [
					{
						"activity": "Resume SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"sqlPool": {
					"referenceName": "SQLPoolTest",
					"type": "SqlPoolReference"
				},
				"typeProperties": {
					"storedProcedureName": "[dbo].[delete_all_rows]",
					"storedProcedureParameters": {
						"table_name": {
							"value": "[dbo].[NATO_Tweets1]",
							"type": "String"
						}
					}
				}
			},
			{
				"name": "Resume SQL Pool",
				"description": "Must be \"Resume\" or \"Pause\"",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Merge JSONs and Convert to CSV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PauseResumeSQLPool",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PauseorResume": "Resume"
					}
				}
			},
			{
				"name": "NLP Analysis",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Copy data to Dedicated SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NLP_Analysis",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"TopicModelingOutputTable": {
							"value": "@pipeline().parameters.TopicOutputTable",
							"type": "Expression"
						},
						"SentimentOutputTable": {
							"value": "@pipeline().parameters.SentimentOutputTable",
							"type": "Expression"
						},
						"SummarizationOutputTable": {
							"value": "@pipeline().parameters.SummarizationOutputTable",
							"type": "Expression"
						},
						"NEROutputTable": {
							"value": "@pipeline().parameters.NEROutputTable",
							"type": "Expression"
						},
						"TopicModelingWordsOutputTable": {
							"value": "@pipeline().parameters.TopicWordsOutputTable",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Pause SQL Pool",
				"description": "Must be \"Resume\" or \"Pause\"",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Archive Analysis",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PauseResumeSQLPool",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PauseorResume": "Pause"
					}
				}
			},
			{
				"name": "ArchiveTweets",
				"description": "Adds \"query\" and \"pull_datetime\" columns. query value is defined by the pipeline parameter. Pull_datetime is the current timestamp.",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Copy data to Dedicated SQL Pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "ArchiveTweets",
						"type": "NotebookReference"
					},
					"parameters": {
						"query": {
							"value": {
								"value": "@pipeline().parameters.QueryName",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "SparkPoolSmall",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"driverSize": "Small",
					"numExecutors": null
				}
			},
			{
				"name": "Pull data until there is no next_token",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Set until variable to false",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set loopCount variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(equals(variables('until'), true), equals(length(variables('loopCountArray')), div(int(pipeline().parameters.MaximumTweetstoPull),int(pipeline().parameters.MaxResults))))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Extract next_token",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "Get Next Token",
									"type": "DataFlowReference"
								},
								"integrationRuntime": {
									"referenceName": "WarmIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								},
								"traceLevel": "None",
								"cacheSinks": {
									"firstRowOnly": true
								}
							}
						},
						{
							"name": "If next_token exists",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Extract next_token",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@not(equals(activity('Extract next_token').output.runStatus.output.sink1.value[0].next_token, null))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Set until variable to true",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "until",
											"value": true
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Move Temp file to Output folder",
										"type": "ExecuteDataFlow",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataflow": {
												"referenceName": "MoveTemptoOutput",
												"type": "DataFlowReference"
											},
											"integrationRuntime": {
												"referenceName": "WarmIntegrationRuntime",
												"type": "IntegrationRuntimeReference"
											},
											"traceLevel": "None",
											"cacheSinks": {
												"firstRowOnly": true
											}
										}
									},
									{
										"name": "GET to Temp",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Move Temp file to Output folder",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "RestSource",
												"httpRequestTimeout": "00:01:40",
												"requestInterval": "00.00:00:00.010",
												"requestMethod": "GET",
												"paginationRules": {
													"supportRFC5988": "true"
												}
											},
											"sink": {
												"type": "JsonSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "JsonWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "RestResource_Next_Token",
												"type": "DatasetReference",
												"parameters": {
													"query": {
														"value": "@pipeline().parameters.Query",
														"type": "Expression"
													},
													"tweet_fields": {
														"value": "@pipeline().parameters.TweetFields",
														"type": "Expression"
													},
													"max_results": {
														"value": "@pipeline().parameters.MaxResults",
														"type": "Expression"
													},
													"next_token": {
														"value": "@activity('Extract next_token').output.runStatus.output.sink1.value[0].next_token",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "Twitter_RawJSON_Temp",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Append loopCount variable_copy1",
										"type": "AppendVariable",
										"dependsOn": [
											{
												"activity": "GET to Temp",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "loopCountArray",
											"value": {
												"value": "@string(add(int(variables('loopCount')), 1))",
												"type": "Expression"
											}
										}
									}
								]
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "Set until variable to false",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Initial GET Past 7 Days into Temp Folder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "until",
					"value": false
				}
			},
			{
				"name": "Set loopCount variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Initial GET Past 7 Days into Temp Folder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "loopCount",
					"value": "0"
				}
			},
			{
				"name": "Archive Analysis",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "NLP Analysis",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "ArchiveAnalysis",
						"type": "NotebookReference"
					},
					"parameters": {
						"query": {
							"value": {
								"value": "@pipeline().parameters.QueryName",
								"type": "Expression"
							},
							"type": "string"
						},
						"Sent_maintable": {
							"value": {
								"value": "@pipeline().parameters.SentimentOutputTable",
								"type": "Expression"
							},
							"type": "string"
						},
						"TopicWords_maintable": {
							"value": {
								"value": "@pipeline().parameters.TopicWordsOutputTable",
								"type": "Expression"
							},
							"type": "string"
						},
						"NamedEntity_maintable": {
							"value": {
								"value": "@pipeline().parameters.NEROutputTable",
								"type": "Expression"
							},
							"type": "string"
						},
						"Abstract_maintable": {
							"value": {
								"value": "@pipeline().parameters.SummarizationOutputTable",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "SparkPoolSmall",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"driverSize": "Small"
				}
			}
		],
		"parameters": {
			"QueryName": {
				"type": "string"
			},
			"Query": {
				"type": "string",
				"defaultValue": "(\"NATO\"OR\"North Atlantic Treaty Organization\"OR%23NATO) lang:en -is:retweet -is:reply"
			},
			"TweetFields": {
				"type": "string",
				"defaultValue": "id,text,created_at,lang,public_metrics"
			},
			"MaxResults": {
				"type": "string",
				"defaultValue": "100"
			},
			"TopicWordsOutputTable": {
				"type": "string",
				"defaultValue": "Words.NATO_Topic_Words"
			},
			"SentimentOutputTable": {
				"type": "string",
				"defaultValue": "Sent.NATO_Sentiment"
			},
			"NEROutputTable": {
				"type": "string",
				"defaultValue": "NER.NATO_NER"
			},
			"SummarizationOutputTable": {
				"type": "string",
				"defaultValue": "sum.NATO_Abstractive_Sum"
			},
			"TopicOutputTable": {
				"type": "string",
				"defaultValue": "Topic.NATO_Topics"
			},
			"MaximumTweetstoPull": {
				"type": "string",
				"defaultValue": "100000"
			},
			"EndYear": {
				"type": "string",
				"defaultValue": "2023"
			},
			"EndMonth": {
				"type": "string",
				"defaultValue": "04"
			},
			"EndDay": {
				"type": "string",
				"defaultValue": "11"
			},
			"EndHour": {
				"type": "string",
				"defaultValue": "01"
			},
			"EndMinute": {
				"type": "string",
				"defaultValue": "01"
			},
			"StartYear": {
				"type": "string",
				"defaultValue": "2023"
			},
			"StartMonth": {
				"type": "string",
				"defaultValue": "04"
			},
			"StartDay": {
				"type": "string",
				"defaultValue": "10"
			},
			"StartHour": {
				"type": "string",
				"defaultValue": "01"
			},
			"StartMinute": {
				"type": "string",
				"defaultValue": "01"
			}
		},
		"variables": {
			"until": {
				"type": "Boolean",
				"defaultValue": false
			},
			"loopCount": {
				"type": "String"
			},
			"loopCountArray": {
				"type": "Array"
			},
			"next_token": {
				"type": "String"
			}
		},
		"annotations": []
	}
}