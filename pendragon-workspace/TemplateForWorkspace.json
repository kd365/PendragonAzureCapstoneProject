{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "pendragon-workspace"
		},
		"RedditHttpServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RedditHttpServer1'"
		},
		"pendragon-workspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pendragon-workspace-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:pendragon-workspace.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"RedditHttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.reddit.com/"
		},
		"RedditHttpServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ryan_supplyin"
		},
		"RedditRestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.reddit.com/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.brandwatch.com/"
		},
		"RestServiceTwitter1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.twitter.com"
		},
		"pendragon-workspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pendragon.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Brandwatch_Test1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web Brandwatch",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.brandwatch.com/projects/1998163585/data/hashtags?queryId=1998956016&startDate=2019-01-01&endDate=2023-02-01",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {
								"Authorization": "Bearer ee40892e-d0ed-453b-8109-8b963b9f76d1"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web Brandwatch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/RestResource1')]",
				"[concat(variables('workspaceId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Brandwatch_Test2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Brandwatch Copy Fulltext",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BrandwatchJson2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Brandwatch Copy Fulltext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestResource1')]",
				"[concat(variables('workspaceId'), '/datasets/BrandwatchJson2')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Reddit_Test1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Reddit Top 5 NATO search",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RedditJson1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RedditJson1')]",
				"[concat(variables('workspaceId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Twitter_Test1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Twitter NATO mentions",
						"description": "2023-02-19T00:00:07.000Z to 2023-02-20T00:00:07.000Z\nmax_results=10",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResourceTwitter1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TwitterJson1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestResourceTwitter1')]",
				"[concat(variables('workspaceId'), '/datasets/TwitterJson1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrandwatchJson2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pendragon-workspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BrandwatchTest2.json",
						"fileSystem": "pendragon"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"results": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accountType": {
										"type": "null"
									},
									"added": {
										"type": "string"
									},
									"assignment": {
										"type": "null"
									},
									"author": {
										"type": "string"
									},
									"avatarUrl": {
										"type": "string"
									},
									"blogName": {
										"type": "null"
									},
									"broadcastMediaUrl": {
										"type": "null"
									},
									"isSyndicated": {
										"type": "boolean"
									},
									"airType": {
										"type": "null"
									},
									"broadcastType": {
										"type": "null"
									},
									"mediaType": {
										"type": "null"
									},
									"categories": {
										"type": "array"
									},
									"categoryDetails": {
										"type": "array"
									},
									"checked": {
										"type": "boolean"
									},
									"city": {
										"type": "null"
									},
									"cityCode": {
										"type": "null"
									},
									"continent": {
										"type": "null"
									},
									"continentCode": {
										"type": "null"
									},
									"country": {
										"type": "null"
									},
									"countryCode": {
										"type": "null"
									},
									"region": {
										"type": "null"
									},
									"regionCode": {
										"type": "null"
									},
									"date": {
										"type": "string"
									},
									"displayUrls": {
										"type": "array"
									},
									"domain": {
										"type": "string"
									},
									"engagementType": {
										"type": "null"
									},
									"expandedUrls": {
										"type": "array"
									},
									"facebookAuthorId": {
										"type": "string"
									},
									"facebookComments": {
										"type": "integer"
									},
									"facebookLikes": {
										"type": "integer"
									},
									"facebookRole": {
										"type": "string"
									},
									"facebookShares": {
										"type": "integer"
									},
									"facebookSubtype": {
										"type": "string"
									},
									"fullText": {
										"type": "string"
									},
									"fullname": {
										"type": "null"
									},
									"gender": {
										"type": "string"
									},
									"guid": {
										"type": "string"
									},
									"impressions": {
										"type": "integer"
									},
									"insightsHashtag": {
										"type": "array"
									},
									"insightsMentioned": {
										"type": "array"
									},
									"instagramCommentCount": {
										"type": "integer"
									},
									"instagramFollowerCount": {
										"type": "integer"
									},
									"instagramFollowingCount": {
										"type": "integer"
									},
									"instagramInteractionsCount": {
										"type": "integer"
									},
									"instagramLikeCount": {
										"type": "integer"
									},
									"instagramPostCount": {
										"type": "integer"
									},
									"interest": {
										"type": "array"
									},
									"itemReview": {
										"type": "null"
									},
									"language": {
										"type": "string"
									},
									"lastAssignmentDate": {
										"type": "null"
									},
									"latitude": {
										"type": "number"
									},
									"linkedinComments": {
										"type": "integer"
									},
									"linkedinEngagement": {
										"type": "number"
									},
									"linkedinImpressions": {
										"type": "integer"
									},
									"linkedinLikes": {
										"type": "integer"
									},
									"linkedinShares": {
										"type": "integer"
									},
									"linkedinSponsored": {
										"type": "boolean"
									},
									"linkedinVideoViews": {
										"type": "integer"
									},
									"locationName": {
										"type": "null"
									},
									"longitude": {
										"type": "number"
									},
									"matchPositions": {
										"type": "array"
									},
									"mediaFilter": {
										"type": "null"
									},
									"mediaUrls": {
										"type": "array"
									},
									"monthlyVisitors": {
										"type": "integer"
									},
									"originalUrl": {
										"type": "string"
									},
									"pageType": {
										"type": "string"
									},
									"parentPostId": {
										"type": "null"
									},
									"parentBlogName": {
										"type": "null"
									},
									"priority": {
										"type": "null"
									},
									"professions": {
										"type": "array"
									},
									"pubType": {
										"type": "string"
									},
									"publisherSubType": {
										"type": "string"
									},
									"queryId": {
										"type": "integer"
									},
									"queryName": {
										"type": "string"
									},
									"rating": {
										"type": "null"
									},
									"reachEstimate": {
										"type": "integer"
									},
									"redditScore": {
										"type": "null"
									},
									"redditScoreUpvoteRatio": {
										"type": "null"
									},
									"redditComments": {
										"type": "null"
									},
									"redditAuthorKarma": {
										"type": "null"
									},
									"redditAuthorAwardeeKarma": {
										"type": "null"
									},
									"redditAuthorAwarderKarma": {
										"type": "null"
									},
									"replyTo": {
										"type": "null"
									},
									"resourceType": {
										"type": "string"
									},
									"retweetOf": {
										"type": "null"
									},
									"rootPostId": {
										"type": "null"
									},
									"rootBlogName": {
										"type": "null"
									},
									"sentiment": {
										"type": "string"
									},
									"sinaWeiboAuthorId": {
										"type": "null"
									},
									"sinaWeiboFollowers": {
										"type": "null"
									},
									"sinaWeiboFollowing": {
										"type": "null"
									},
									"sinaWeiboBiFollowers": {
										"type": "null"
									},
									"sinaWeiboPostCount": {
										"type": "null"
									},
									"sinaWeiboFavouritesCount": {
										"type": "null"
									},
									"sinaWeiboRawLocation": {
										"type": "null"
									},
									"shortUrls": {
										"type": "array"
									},
									"snippet": {
										"type": "string"
									},
									"starred": {
										"type": "boolean"
									},
									"status": {
										"type": "null"
									},
									"subreddit": {
										"type": "null"
									},
									"subredditSubscribers": {
										"type": "null"
									},
									"subtype": {
										"type": "string"
									},
									"tags": {
										"type": "array"
									},
									"threadAuthor": {
										"type": "string"
									},
									"threadCreated": {
										"type": "string"
									},
									"threadEntryType": {
										"type": "string"
									},
									"threadId": {
										"type": "string"
									},
									"threadURL": {
										"type": "string"
									},
									"title": {
										"type": "string"
									},
									"twitterAuthorId": {
										"type": "null"
									},
									"twitterFollowers": {
										"type": "integer"
									},
									"twitterFollowing": {
										"type": "integer"
									},
									"twitterPostCount": {
										"type": "integer"
									},
									"twitterReplyCount": {
										"type": "integer"
									},
									"twitterRetweets": {
										"type": "integer"
									},
									"twitterLikeCount": {
										"type": "null"
									},
									"twitterRole": {
										"type": "null"
									},
									"twitterVerified": {
										"type": "boolean"
									},
									"updated": {
										"type": "string"
									},
									"url": {
										"type": "string"
									},
									"copyright": {
										"type": "array"
									},
									"weblogTitle": {
										"type": "null"
									},
									"classifications": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"classifierId": {
													"type": "string"
												},
												"labelId": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"confidence": {
													"type": "number"
												}
											}
										}
									},
									"pageTypeName": {
										"type": "string"
									},
									"contentSource": {
										"type": "string"
									},
									"contentSourceName": {
										"type": "string"
									},
									"impact": {
										"type": "number"
									},
									"resourceId": {
										"type": "string"
									}
								}
							}
						},
						"resultsTotal": {
							"type": "integer"
						},
						"resultsPage": {
							"type": "integer"
						},
						"resultsPageSize": {
							"type": "integer"
						},
						"nextCursor": {
							"type": "string"
						},
						"startDate": {
							"type": "string"
						},
						"endDate": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pendragon-workspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BrandwatchJson2Flatten')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pendragon-workspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BrandwatchTest2Flatten.json",
						"fileSystem": "pendragon"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pendragon-workspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Json1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pendragon-workspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "RedditTest1dataset",
						"fileSystem": "pendragon"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pendragon-workspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RedditJson1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RedditHttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/search.json?q=NATO&sort=top&limit=5"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RedditHttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/projects/1998163585/data/mentions/fulltext?queryId=2001274488&startDate=2023-01-01&endDate=2023-02-01&pageType!=twitter"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResourceReddit1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RedditRestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/search.json?q=NATO&sort=top&limit=5"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RedditRestService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResourceTwitter1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceTwitter1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/2/tweets/search/recent?query=NATO&start_time=2023-02-19T00:00:07.000Z&end_time=2023-02-20T00:00:07.000Z&max_results=10&tweet.fields=attachments,author_id,context_annotations,conversation_id,created_at,entities,geo,id,in_reply_to_user_id,lang,possibly_sensitive,public_metrics,referenced_tweets,reply_settings,source,text,withheld,edit_history_tweet_ids,edit_controls&expansions=attachments.poll_ids,attachments.media_keys,author_id,geo.place_id,in_reply_to_user_id,referenced_tweets.id,entities.mentions.username,referenced_tweets.id.author_id,edit_history_tweet_ids&media.fields=duration_ms,height,media_key,preview_image_url,public_metrics,type,url,width&place.fields=contained_within,country,country_code,full_name,geo,id,name,place_type&poll.fields=duration_minutes,end_datetime,id,options,voting_status&user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RestServiceTwitter1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TwitterJson1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pendragon-workspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "pendragon"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"results": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"label": {
										"type": "null"
									},
									"name": {
										"type": "string"
									},
									"volume": {
										"type": "integer"
									},
									"retweets": {
										"type": "integer"
									},
									"tweets": {
										"type": "integer"
									},
									"reachEstimate": {
										"type": "integer"
									},
									"impressions": {
										"type": "integer"
									}
								}
							}
						},
						"orderBy": {
							"type": "string"
						},
						"orderDirection": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pendragon-workspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RedditHttpServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('RedditHttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RedditHttpServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RedditHttpServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RedditRestService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RedditRestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestServiceTwitter1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceTwitter1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pendragon-workspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('pendragon-workspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pendragon-workspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pendragon-workspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BrandwatchJson2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BrandwatchJson2Flatten",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          results as (accountType as string, added as string, assignment as string, author as string, avatarUrl as string, blogName as string, broadcastMediaUrl as string, isSyndicated as boolean, airType as string, broadcastType as string, mediaType as string, categories as string[], categoryDetails as string[], checked as boolean, city as string, cityCode as string, continent as string, continentCode as string, country as string, countryCode as string, region as string, regionCode as string, date as string, displayUrls as string[], domain as string, engagementType as string, expandedUrls as string[], facebookAuthorId as string, facebookComments as integer, facebookLikes as integer, facebookRole as string, facebookShares as integer, facebookSubtype as string, fullText as string, fullname as string, gender as string, guid as string, impressions as integer, insightsHashtag as string[], insightsMentioned as string[], instagramCommentCount as integer, instagramFollowerCount as integer, instagramFollowingCount as integer, instagramInteractionsCount as integer, instagramLikeCount as integer, instagramPostCount as integer, interest as string[], itemReview as string, language as string, lastAssignmentDate as string, latitude as double, linkedinComments as integer, linkedinEngagement as double, linkedinImpressions as integer, linkedinLikes as integer, linkedinShares as integer, linkedinSponsored as boolean, linkedinVideoViews as integer, locationName as string, longitude as double, matchPositions as string[], mediaFilter as string, mediaUrls as string[], monthlyVisitors as integer, originalUrl as string, pageType as string, parentPostId as string, parentBlogName as string, priority as string, professions as string[], pubType as string, publisherSubType as string, queryId as integer, queryName as string, rating as string, reachEstimate as integer, redditScore as string, redditScoreUpvoteRatio as string, redditComments as string, redditAuthorKarma as string, redditAuthorAwardeeKarma as string, redditAuthorAwarderKarma as string, replyTo as string, resourceType as string, retweetOf as string, rootPostId as string, rootBlogName as string, sentiment as string, sinaWeiboAuthorId as string, sinaWeiboFollowers as string, sinaWeiboFollowing as string, sinaWeiboBiFollowers as string, sinaWeiboPostCount as string, sinaWeiboFavouritesCount as string, sinaWeiboRawLocation as string, shortUrls as string[], snippet as string, starred as boolean, status as string, subreddit as string, subredditSubscribers as string, subtype as string, tags as string[], threadAuthor as string, threadCreated as string, threadEntryType as string, threadId as string, threadURL as string, title as string, twitterAuthorId as string, twitterFollowers as integer, twitterFollowing as integer, twitterPostCount as integer, twitterReplyCount as integer, twitterRetweets as integer, twitterLikeCount as string, twitterRole as string, twitterVerified as boolean, updated as string, url as string, copyright as string[], weblogTitle as string, classifications as (classifierId as string, labelId as string, name as string, confidence as double)[], pageTypeName as string, contentSource as string, contentSourceName as string, impact as double, resourceId as string)[],",
						"          resultsTotal as integer,",
						"          resultsPage as integer,",
						"          resultsPageSize as integer,",
						"          nextCursor as string,",
						"          startDate as string,",
						"          endDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> source1",
						"source1 foldDown(unroll(results, results),",
						"     mapColumn(",
						"          results,",
						"          resultsTotal,",
						"          resultsPage,",
						"          resultsPageSize,",
						"          nextCursor,",
						"          startDate,",
						"          endDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BrandwatchJson2')]",
				"[concat(variables('workspaceId'), '/datasets/BrandwatchJson2Flatten')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}