{
	"name": "NLP_manual_post_sent",
	"properties": {
		"folder": {
			"name": "NLP_manual"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "badca07a-3f42-47c7-bbfd-4cc483276296"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolSmall",
				"name": "SparkPoolSmall",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reading SQL table into a dataframe. \n",
					"\n",
					"# Add required imports\n",
					"import com.microsoft.spark.sqlanalytics\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\n",
					"from pyspark.sql.functions import col\n",
					"\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\n",
					"\n",
					"# Read from a query\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\n",
					"df = (spark.read\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\n",
					"                     # Defaults to storage path defined in the runtime configurations\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\n",
					"                     # query from which data will be read\n",
					"                     .option(Constants.QUERY, \"select * from Sent.NATO_Sentiment\")\n",
					"                     .synapsesql())"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show()"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.groupBy(\"topic\").count().show()"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\n",
					"\n",
					"df2 = df.groupBy('topic').agg(F.collect_list('cleantext').alias('cleantext'))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2.show()"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2.sort(df2.topic.asc()).show()"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install transformers"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install wordcloud"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"import numpy as np\n",
					"import pandas as pd\n",
					"from os import path\n",
					"from PIL import Image\n",
					"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n",
					""
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\n",
					"%matplotlib inline"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, concat_ws\n",
					"df3 = df2.withColumn(\"cleantext\",\n",
					"   concat_ws(\",\",col(\"cleantext\")))\n",
					"df3.printSchema()\n",
					"df3.show(truncate=False)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df3_sorted = df3.sort(df3.topic.asc())\n",
					"df3_sorted.show()\n",
					""
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df3_sorted.dtypes\n",
					""
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Each topic\n",
					"topic0text = df3_sorted.collect()[0]['cleantext']\n",
					"topic1text = df3_sorted.collect()[1]['cleantext']\n",
					"topic2text = df3_sorted.collect()[2]['cleantext']\n",
					"topic3text = df3_sorted.collect()[3]['cleantext']\n",
					"topic4text = df3_sorted.collect()[4]['cleantext']\n",
					""
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stopwords = set(STOPWORDS)\n",
					"# Create and generate a word cloud image:\n",
					"wordcloud_topic0 = WordCloud(max_font_size=80, max_words=1000, background_color='white', stopwords=stopwords,\n",
					"               min_font_size=10, colormap='Dark2').generate(str(topic0text))\n",
					"\n",
					"# Display the generated image:\n",
					"plt.imshow(wordcloud_topic0, interpolation='bilinear')\n",
					"plt.axis(\"off\")\n",
					"plt.show()\n",
					"\n",
					""
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create and generate a word cloud image:\n",
					"wordcloud_topic1 = WordCloud(max_font_size=80, max_words=1000, background_color='white', stopwords=stopwords,\n",
					"               min_font_size=10, colormap='Dark2').generate(topic1text)\n",
					"\n",
					"# Display the generated image:\n",
					"plt.imshow(wordcloud_topic1, interpolation='bilinear')\n",
					"plt.axis(\"off\")\n",
					"plt.show()"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create and generate a word cloud image:\n",
					"wordcloud_topic2 = WordCloud(max_font_size=80, max_words=1000, background_color='white', stopwords=stopwords,\n",
					"               min_font_size=10, colormap='Dark2').generate(topic2text)\n",
					"\n",
					"# Display the generated image:\n",
					"plt.imshow(wordcloud_topic2, interpolation='bilinear')\n",
					"plt.axis(\"off\")\n",
					"plt.show()"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create and generate a word cloud image:\n",
					"wordcloud_topic3 = WordCloud(max_font_size=80, max_words=1000, background_color='white', stopwords=stopwords,\n",
					"               min_font_size=10, colormap='Dark2').generate(topic3text)\n",
					"\n",
					"# Display the generated image:\n",
					"plt.imshow(wordcloud_topic3, interpolation='bilinear')\n",
					"plt.axis(\"off\")\n",
					"plt.show()"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create and generate a word cloud image:\n",
					"wordcloud_topic4 = WordCloud(max_font_size=80, max_words=1000, background_color='white', stopwords=stopwords,\n",
					"               min_font_size=10, colormap='Dark2').generate(topic4text)\n",
					"\n",
					"# Display the generated image:\n",
					"plt.imshow(wordcloud_topic4, interpolation='bilinear')\n",
					"plt.axis(\"off\")\n",
					"plt.show()"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from transformers import pipeline\n",
					""
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"summarizer = pipeline(\"summarization\")"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#def my_string(value):\n",
					"#    firstString = ''\n",
					"#    secondString = ''\n",
					"#    thirdString = ''\n",
					"#    fourthString = ''\n",
					"#    for i in range(0,len(value)):\n",
					"#        if i <= len(value)//4-1:\n",
					"#            firstString = firstString + value[i]\n",
					"#        if i <= len(value)//3-1:\n",
					"#            secondString = secondString + value[i]\n",
					"#        if i <= len(value)//2-1:\n",
					"#            thirdString = thirdString + value[i]\n",
					"#        else:\n",
					"#            fourthString = fourthString + value[i]\n",
					"#    return firstString, secondString, thirdString, fourthString\n",
					"\n",
					"#split_string = my_string(topic0text)"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#print(split_string)\n",
					"\n",
					"#fourth1 = split_string[0]\n",
					"#fourth2 = split_string[1]\n",
					"#fourth3 = split_string[2]\n",
					"#fourth4 = split_string[3]\n",
					""
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"summary_text1 = summarizer(third1, max_length=100, min_length=5, do_sample=False)[0]['summary_text']\n",
					"summary_text2 = summarizer(third2, max_length=100, min_length=5, do_sample=False)[0]['summary_text']\n",
					"summary_text3 = summarizer(third3, max_length=100, min_length=5, do_sample=False)[0]['summary_text']\n",
					"\n",
					"abstractive_topic0 = summary_text1 + summary_text2 + summary_text3"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"summary_text = summarizer(topic0text, max_length=100, min_length=5, do_sample=False)[0]['summary_text']\n",
					"print(summary_text)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install spacy"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import spacy\n",
					"from spacy.lang.en.stop_words import STOP_WORDS\n",
					"from string import punctuation\n",
					"from heapq import nlargest"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Importing requirements\n",
					"from transformers import T5Tokenizer, T5Config, T5ForConditionalGeneration"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install transformers==2.8.0\n",
					"!pip install torch==1.4.0"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from transformers import T5Tokenizer, T5ForConditionalGeneration, T5Config\n",
					"model = T5ForConditionalGeneration.from_pretrained('t5-small')\n",
					"tokenizer = T5Tokenizer.from_pretrained('t5-small')\n",
					"device = torch.device('cpu')\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install transformers==2.9.0 \n",
					"!pip install pytorch_lightning==0.7.5"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install sentencepiece==0.1.91"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"text = \"summarize:\" + topic0text\n",
					"text"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_ids=tokenizer.encode(text, return_tensors='pt', max_length=512)"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import nltk\n",
					"from nltk.tokenize import word_tokenize\n",
					"from nltk.tag import pos_tag"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def preprocess(sent):\n",
					"    sent = nltk.word_tokenize(sent)\n",
					"    sent = nltk.pos_tag(sent)\n",
					"    return sent"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sent = preprocess(topic0text)\n",
					"sent"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#import nltk\n",
					"#nltk.download('punkt')\n",
					"nltk.download('averaged_perceptron_tagger')"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pattern = 'NP: {<DT>?<JJ>*<NN>}'"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cp = nltk.RegexpParser(pattern)\n",
					"cs = cp.parse(sent)\n",
					"print(cs)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import spacy\n",
					"from spacy import displacy\n",
					"from collections import Counter\n",
					"import en_core_web_sm\n",
					"nlp = spacy.load(\"en_core_web_sm\")"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"nlp = spacy.load(\"en_core_web_sm\")"
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"python -m spacy download en_core_web_sm"
				],
				"execution_count": 99
			}
		]
	}
}