{
	"name": "CleansDataFromFolder",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolTest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9a20c3d9-e847-4523-9b56-873570d32737"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolTest",
				"name": "SparkPoolTest",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolTest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"!pip install azure-storage-file-datalake"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# azureml-core of version 1.0.72 or higher is required\r\n",
					"# azureml-dataprep[pandas] of version 1.1.34 or higher is required\r\n",
					"from azureml.core import Workspace, Dataset\r\n",
					"\r\n",
					"subscription_id = '57cd2ff8-9306-41d0-9cad-c2052a0a8381'\r\n",
					"resource_group = 'Spring2023-TeamPendragon'\r\n",
					"workspace_name = 'pendragon-ml'\r\n",
					"\r\n",
					"workspace = Workspace(subscription_id, resource_group, workspace_name)\r\n",
					"\r\n",
					"dataset = Dataset.get_by_name(workspace, name='NATO_Tweets')\r\n",
					"df = dataset.to_pandas_dataframe()\r\n",
					"df\r\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Remove @, #, links, and emoticons"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# remove @s\r\n",
					"df['text'] = df['text'].str.replace(r'@\\w+\\s*', '')\r\n",
					"\r\n",
					"# remove hashtags\r\n",
					"df['text'] = df['text'].str.replace(r'#\\w+\\s*', '')\r\n",
					"\r\n",
					"# Remove links\r\n",
					"import re\r\n",
					"df['text'] = df['text'].apply(lambda x: re.sub(r'http\\S+', '', x))\r\n",
					"\r\n",
					"# drop rows where the 'text' column is an empty string\r\n",
					"df = df.drop(df[df['text'] == ''].index)\r\n",
					"\r\n",
					"# drop rows where the 'lang' column is not 'en'\r\n",
					"df = df.drop(df[df['lang'] != 'en'].index)\r\n",
					"\r\n",
					"# print the resulting dataframe\r\n",
					"#df.head(10)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"\r\n",
					"# define a regex pattern to match emoticons\r\n",
					"emoticon_pattern = re.compile(\"[\"\r\n",
					"                              u\"\\U0001F600-\\U0001F64F\"  # emoticons\r\n",
					"                              u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\r\n",
					"                              u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\r\n",
					"                              u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\r\n",
					"                              \"]+\", flags=re.UNICODE)\r\n",
					"\r\n",
					"# apply the regex pattern to the 'text' column to remove emoticons\r\n",
					"df['text'] = df['text'].str.replace(emoticon_pattern, '')\r\n",
					"\r\n",
					"# print the modified DataFrame\r\n",
					"print(df['text'])"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Add a period to the end of text if one doesn't exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# check if each string in 'text' column ends with a period\r\n",
					"no_period_mask = ~df['text'].str.endswith('.')\r\n",
					"\r\n",
					"# add period to the end of the strings that don't end with a period\r\n",
					"df.loc[no_period_mask, 'text'] += '.'\r\n",
					"\r\n",
					"# print the modified DataFrame\r\n",
					"#print(df['text'])"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sort the DataFrame by the 'created_at' column\r\n",
					"df = df.sort_values(by='created_at')\r\n",
					"#df.head(10)"
				],
				"execution_count": 23
			}
		]
	}
}