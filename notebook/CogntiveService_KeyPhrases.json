{
	"name": "CogntiveService_KeyPhrases",
	"properties": {
		"folder": {
			"name": "NLP"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolTest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b0715db-c182-41d7-bc85-fd18f6eac939"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolTest",
				"name": "SparkPoolTest",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolTest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\r\n",
					"\r\n",
					"# Read from a query\r\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\r\n",
					"df = (spark.read\r\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\r\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\r\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					"                     # Defaults to storage path defined in the runtime configurations\r\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					"                     # query from which data will be read\r\n",
					"                     .option(Constants.QUERY, \"select * from Topic.NATO_Topics WHERE topic = 0\")\r\n",
					"                     .synapsesql()\r\n",
					")"
				],
				"execution_count": 180
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Select sample size for testing\r\n",
					"\r\n",
					"# Sort ascending by 'created_at'\r\n",
					"from pyspark.sql.functions import desc\r\n",
					"\r\n",
					"df = df.orderBy(desc(\"created_at\"))\r\n",
					"\r\n",
					"# select the first 100 records\r\n",
					"df = df.limit(100)"
				],
				"execution_count": 181
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import regexp_replace\r\n",
					"\r\n",
					"# Define the regular expression pattern to match words starting with @, &, or https\r\n",
					"regex = r'@\\w+|&\\w+|#\\w+'\r\n",
					"\r\n",
					"# Apply the regexp_replace function to the text column and create a new column with the filtered text\r\n",
					"df = df.withColumn(\"text\", regexp_replace(col(\"text\"), regex, ''))\r\n",
					"df = df.withColumn('text', regexp_replace('text', 'https\\\\S+', ''))\r\n",
					"\r\n",
					"# Show the filtered DataFrame\r\n",
					"df.select(\"text\").show()"
				],
				"execution_count": 183
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import synapse.ml\r\n",
					"from synapse.ml.cognitive import *\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 184
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"linked_service_name = \"CognitiveService1\""
				],
				"execution_count": 185
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import required libraries\r\n",
					"import json\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"\r\n",
					"# Batch size\r\n",
					"batch_size = 100\r\n",
					"\r\n",
					"# First, count the total number of rows in the DataFrame\r\n",
					"num_rows = df.count()\r\n",
					"\r\n",
					"# Next, calculate the number of batches needed to split the DataFrame into batches of 5\r\n",
					"num_batches = int(num_rows / batch_size) + (num_rows % batch_size > 0)\r\n",
					"\r\n",
					"# Then, use randomSplit to split the DataFrame into smaller DataFrames of equal size\r\n",
					"df_batches = df.randomSplit([1.0]*num_batches, seed=42)\r\n",
					"\r\n",
					"# define the schema for the output DataFrame\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"entity_text\", StringType(), True),\r\n",
					"    StructField(\"entity_category\", StringType(), True)\r\n",
					"    ])\r\n",
					"\r\n",
					"kp_output = []\r\n",
					"\r\n",
					"# create an empty DataFrame with the defined schema\r\n",
					"output_df = spark.createDataFrame([], schema)\r\n",
					"# Finally, use limit to limit the number of rows in each DataFrame to 5\r\n",
					"for i in range(num_batches):\r\n",
					"    batch = df_batches[i].limit(batch_size)\r\n",
					"    keyPhrase = (KeyPhraseExtractor()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguageCol(\"lang\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"    kp_batch_output = keyPhrase.transform(batch)\r\n",
					"    #display(ner_batch_output)\r\n",
					"\r\n",
					"    # Extract the 'replies' column and convert it to JSON\r\n",
					"    json_output = kp_batch_output.select(\"replies\").toJSON().collect()\r\n",
					"\r\n",
					"    # Deserialize the JSON and extract the 'sentiment' field\r\n",
					"    keyphrases = [json.loads(x)[\"replies\"] for x in json_output]\r\n",
					"\r\n",
					"    # Print the 'sentiment' field for each row\r\n",
					"    for each in keyphrases:\r\n",
					"        #print(each)\r\n",
					"        for keyphrase in each['document']['keyPhrases']:\r\n",
					"            kp_output.append(keyphrase)\r\n",
					"\r\n",
					"print(kp_output)"
				],
				"execution_count": 186
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Create a PySpark DataFrame from the array\r\n",
					"kp_df = spark.createDataFrame([(i, 1) for i in kp_output], ['text', 'count'])\r\n",
					"\r\n",
					"# Group by 'text' column and sum the 'count' column to get the count of each unique text\r\n",
					"kp_df = kp_df.groupBy('text').agg({'count': 'sum'})\r\n",
					"\r\n",
					"# Sort the DataFrame by the 'count' column in descending order\r\n",
					"kp_df = kp_df.sort(col('sum(count)').desc())\r\n",
					"\r\n",
					"# Show the resulting DataFrame\r\n",
					"display(kp_df)"
				],
				"execution_count": 187
			}
		]
	}
}