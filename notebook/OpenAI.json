{
	"name": "OpenAI",
	"properties": {
		"folder": {
			"name": "OpenAI"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d3b6bdd8-d976-46ee-8196-36d7bdeb1643"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolSmall",
				"name": "SparkPoolSmall",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\r\n",
					"\r\n",
					"# Read from a query\r\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\r\n",
					"df = (spark.read\r\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\r\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\r\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					"                     # Defaults to storage path defined in the runtime configurations\r\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					"                     # query from which data will be read\r\n",
					"                     .option(Constants.QUERY, \"select * from dbo.NATO_Tweets1\")\r\n",
					"                     .synapsesql()\r\n",
					")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sort dataframe by date column in ascending order\r\n",
					"sorted_df = df.orderBy(col(\"impression_count\").desc())\r\n",
					"\r\n",
					"# show sorted dataframe\r\n",
					"sorted_df.show()"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# select the first 20 records\r\n",
					"first_20 = sorted_df.limit(20)\r\n",
					"first_20.show()"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import collect_list, concat_ws\r\n",
					"\r\n",
					"# concatenate strings in \"text\" column into a single string\r\n",
					"concatenated_string = first_20.agg(concat_ws(\"\", collect_list(\"text\"))).collect()[0][0]\r\n",
					"\r\n",
					"print(concatenated_string)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"sc = SparkContext.getOrCreate()\r\n",
					"\r\n",
					"input_string = concatenated_string\r\n",
					"\r\n",
					"def remove_emoji(text):\r\n",
					"    return text.encode('ascii', 'ignore').decode('ascii')\r\n",
					"result_string = remove_emoji(input_string)\r\n",
					"\r\n",
					"words_rdd = sc.parallelize(result_string.split())\r\n",
					"filtered_words_rdd = words_rdd.filter(lambda word: not word.startswith(\"#\"))\r\n",
					"result_string = \" \".join(filtered_words_rdd.collect())\r\n",
					"\r\n",
					"words_rdd = sc.parallelize(result_string.split())\r\n",
					"filtered_words_rdd = words_rdd.filter(lambda word: not word.startswith(\"@\"))\r\n",
					"result_string = \" \".join(filtered_words_rdd.collect())\r\n",
					"\r\n",
					"words_rdd = sc.parallelize(result_string.split())\r\n",
					"filtered_words_rdd = words_rdd.filter(lambda word: not word.startswith(\"&\"))\r\n",
					"result_string = \" \".join(filtered_words_rdd.collect())\r\n",
					"\r\n",
					"words_rdd = sc.parallelize(result_string.split())\r\n",
					"filtered_words_rdd = words_rdd.filter(lambda word: not word.startswith(\"https\"))\r\n",
					"result_string = \" \".join(filtered_words_rdd.collect())\r\n",
					"\r\n",
					"print(result_string)\r\n",
					""
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#!pip install openai\r\n",
					"import openai\r\n",
					"\r\n",
					"\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://querystructureddata.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"c607bf2bba454302b492ba369efe54f6\""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p = 'Provide a summary of the text below that captures the main idea. ' + result_string"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Note: The openai-python library support for Azure OpenAI is in preview.\r\n",
					"import os\r\n",
					"import openai\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://querystructureddata.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"c607bf2bba454302b492ba369efe54f6\"\r\n",
					"\r\n",
					"# query = input(\"Enter your query in natural language: \")\r\n",
					"\r\n",
					"response = openai.Completion.create(\r\n",
					"  engine=\"SumTest\",\r\n",
					"  prompt = p,\r\n",
					"  temperature=0.3,\r\n",
					"  max_tokens=250,\r\n",
					"  top_p=1,\r\n",
					"  frequency_penalty=0,\r\n",
					"  presence_penalty=0,\r\n",
					"  best_of=1,\r\n",
					"  stop=None)\r\n",
					"\r\n",
					"response"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p = 'Perform key phrase extraction on the following text. ' + result_string"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Note: The openai-python library support for Azure OpenAI is in preview.\r\n",
					"import os\r\n",
					"import openai\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://querystructureddata.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"c607bf2bba454302b492ba369efe54f6\"\r\n",
					"\r\n",
					"# query = input(\"Enter your query in natural language: \")\r\n",
					"\r\n",
					"response = openai.Completion.create(\r\n",
					"  engine=\"SumTest\",\r\n",
					"  prompt = p,\r\n",
					"  temperature=0.3,\r\n",
					"  max_tokens=250,\r\n",
					"  top_p=1,\r\n",
					"  frequency_penalty=0,\r\n",
					"  presence_penalty=0,\r\n",
					"  best_of=1,\r\n",
					"  stop=None)\r\n",
					"\r\n",
					"response"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p = 'Perform Named Entity Recognition on the following text. ' + result_string"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Note: The openai-python library support for Azure OpenAI is in preview.\r\n",
					"import os\r\n",
					"import openai\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://querystructureddata.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"c607bf2bba454302b492ba369efe54f6\"\r\n",
					"\r\n",
					"# query = input(\"Enter your query in natural language: \")\r\n",
					"\r\n",
					"response = openai.Completion.create(\r\n",
					"  engine=\"SumTest\",\r\n",
					"  prompt = p,\r\n",
					"  temperature=0.3,\r\n",
					"  max_tokens=250,\r\n",
					"  top_p=1,\r\n",
					"  frequency_penalty=0,\r\n",
					"  presence_penalty=0,\r\n",
					"  best_of=1,\r\n",
					"  stop=None)\r\n",
					"\r\n",
					"response"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p = 'What is the overall sentiment of the following text as a percentage. ' + result_string"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Note: The openai-python library support for Azure OpenAI is in preview.\r\n",
					"import os\r\n",
					"import openai\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://querystructureddata.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"c607bf2bba454302b492ba369efe54f6\"\r\n",
					"\r\n",
					"# query = input(\"Enter your query in natural language: \")\r\n",
					"\r\n",
					"response = openai.Completion.create(\r\n",
					"  engine=\"SumTest\",\r\n",
					"  prompt = p,\r\n",
					"  temperature=0.3,\r\n",
					"  max_tokens=250,\r\n",
					"  top_p=1,\r\n",
					"  frequency_penalty=0,\r\n",
					"  presence_penalty=0,\r\n",
					"  best_of=1,\r\n",
					"  stop=None)\r\n",
					"\r\n",
					"response"
				],
				"execution_count": 65
			}
		]
	}
}