{
	"name": "CogntiveServices_Summarization_UsingParms",
	"properties": {
		"folder": {
			"name": "NLP"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "51c269be-6b08-4a0d-8d9a-d2db59ac1c40"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolSmall",
				"name": "SparkPoolSmall",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Cognitive Services Extractive Summary for inputs into OpenAI for Abstractive Summary \r\n",
					"## For Each topic\r\n",
					"<hr>"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Install necessary packags and create functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install azure-ai-textanalytics==5.3.0b1"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install openai"
				],
				"execution_count": 34
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a variable for the output SQL Pool table name\r\n",
					"Enter a default place holder name which will be changed by the pipeline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"table = \"sum.NATO_Abstractive_Sum\"\n",
					"senttable = \"Sent.NATO_Sentiment\"\n",
					"\n",
					"#table = \"sum.Aithusa_Abstractive_Sum\"\n",
					"#senttable = \"Sent.Aithusa_Sentiment\""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"import re\r\n",
					"from azure.ai.textanalytics import TextAnalyticsClient\r\n",
					"from azure.core.credentials import AzureKeyCredential\r\n",
					"from azure.core.credentials import AzureKeyCredential\r\n",
					"from azure.ai.textanalytics import (TextAnalyticsClient,ExtractSummaryAction) \r\n",
					"import openai\r\n",
					"import time"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create function to pull data from the Dedicated SQL Pool\r\n",
					"def QueryDataSQLPool (query):\r\n",
					"    # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"    # Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"    spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\r\n",
					"\r\n",
					"    # Read from a query\r\n",
					"    # Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\r\n",
					"    df = (spark.read\r\n",
					"                        # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"                        # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\r\n",
					"                        .option(Constants.DATABASE, \"SQLPoolTest\")\r\n",
					"                        # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					"                        # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					"                        .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					"                        # Defaults to storage path defined in the runtime configurations\r\n",
					"                        .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					"                        # query from which data will be read\r\n",
					"                        .option(Constants.QUERY, query)\r\n",
					"                        .synapsesql()\r\n",
					"    )\r\n",
					"    return(df)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Enter Cognitive Services credentials\r\n",
					"key = \"a3028b5f7e7a462d8a3381e49b9c976d\"\r\n",
					"endpoint = \"https://pendragon-language.cognitiveservices.azure.com/\""
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Enter Azure OpenAI API credentials \r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_base = \"https://pendragonopenai.openai.azure.com/\"\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_key = \"7c4b192d51f64c09a2ca680590ccae3f\""
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create function to split input to Cogntive Services Extractive Summarization into batches of 125000 characters max\r\n",
					"def split_into_batches(input_string, max_chars_per_batch):\r\n",
					"    current_batch = \"\"\r\n",
					"    result = []\r\n",
					"    for c in input_string:\r\n",
					"        if len(current_batch) + 1 > max_chars_per_batch:\r\n",
					"            result.append(current_batch)\r\n",
					"            current_batch = c\r\n",
					"        else:\r\n",
					"            current_batch += c\r\n",
					"    if current_batch:\r\n",
					"        result.append(current_batch)\r\n",
					"    return result"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create function to authenticate the client using your key and endpoint \r\n",
					"def authenticate_client():\r\n",
					"    ta_credential = AzureKeyCredential(key)\r\n",
					"    text_analytics_client = TextAnalyticsClient(\r\n",
					"            endpoint=endpoint, \r\n",
					"            credential=ta_credential)\r\n",
					"    return text_analytics_client\r\n",
					"\r\n",
					"client = authenticate_client()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creat function to apply Exractive Summarization\r\n",
					"def sample_extractive_summarization(client,doc):\r\n",
					"\r\n",
					"    document = doc\r\n",
					"\r\n",
					"    poller = client.begin_analyze_actions(\r\n",
					"        document,\r\n",
					"        actions=[\r\n",
					"            ExtractSummaryAction(max_sentence_count=20)\r\n",
					"        ],\r\n",
					"    )\r\n",
					"    document_results = poller.result()\r\n",
					"    for result in document_results:\r\n",
					"        extract_summary_result = result[0]  # first document, first result\r\n",
					"        #if extract_summary_result.is_error:\r\n",
					"        #    print(\"...Is an error with code '{}' and message '{}'\".format(\r\n",
					"        #        extract_summary_result.code, extract_summary_result.message\r\n",
					"        #    ))\r\n",
					"        #else:\r\n",
					"            #print(\"Summary extracted: \\n{}\".format(\r\n",
					"            #    \" \".join([sentence.text for sentence in extract_summary_result.sentences]))\r\n",
					"            #)\r\n",
					"    return(\" \".join([sentence.text for sentence in extract_summary_result.sentences]))"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def Extractive_Summary_Batches(input_string, max_chars_per_batch):\r\n",
					"    # Split the string into batches\r\n",
					"    result = split_into_batches(input_string, max_chars_per_batch)\r\n",
					"    print('Number of batches',len(result))\r\n",
					"    b = 1\r\n",
					"    for batch in result:\r\n",
					"        print('Characters in batch ',b, ':', len(batch))\r\n",
					"        b = b + 1\r\n",
					"\r\n",
					"    # For each batch create an extractive summary of 10 sentences\r\n",
					"    ex_summaries = []\r\n",
					"\r\n",
					"    for each in result:\r\n",
					"        #print('Batch', [each])\r\n",
					"        ex_summary = sample_extractive_summarization(client,[each])\r\n",
					"        ex_summaries.append([ex_summary])\r\n",
					"\r\n",
					"    # Prepare output for next batch\r\n",
					"    result = [' '.join(sums) for sums in ex_summaries]\r\n",
					"    document = [result]\r\n",
					"    input_string = ' '.join([string for sublst in document for string in sublst])\r\n",
					"\r\n",
					"    # Extract the string that contains all tweets\r\n",
					"    return input_string"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define dataframe schema\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"topic\", ShortType(), True),\r\n",
					"    StructField(\"abstractive_summary\", StringType(), True)\r\n",
					"    ])"
				],
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Cognitive Services Extractive to OpenAI Abstractive Summarization"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def Abstractive_Summarization(dataframe, topic):\r\n",
					"    if dataframe.count() > 1:\r\n",
					"        text_col = dataframe.select('cleantext')\r\n",
					"        # Collect all tweets into a list\r\n",
					"        text_list = text_col.rdd.map(lambda row: row[0]).collect()\r\n",
					"        # Join all tweets into a single document\r\n",
					"        result = \" \".join([str(text) + \".\" for text in text_list])\r\n",
					"        document = [result]\r\n",
					"        # Extract the string that contains all tweets\r\n",
					"        input_string = document[0]\r\n",
					"\r\n",
					"        tokens = input_string.split()  # tokenize the text by splitting on whitespace\r\n",
					"        num_tokens = len(tokens)  # count the number of tokens\r\n",
					"        print(\"Number of input tokens: \", num_tokens) \r\n",
					"\r\n",
					"        loops = 1\r\n",
					"        # Run the loop\r\n",
					"        while num_tokens > 1798:\r\n",
					"            print(\"Extractive Summary\", loops)\r\n",
					"            loops = loops + 1\r\n",
					"            # Call the function and pass in the current input value\r\n",
					"            output_value = Extractive_Summary_Batches(input_string, max_chars_per_batch = 125000)\r\n",
					"            \r\n",
					"            # Print the output summary\r\n",
					"            #print(output_value)\r\n",
					"            \r\n",
					"            # Update the input value to be the output value from the previous iteration\r\n",
					"            input_string = output_value\r\n",
					"\r\n",
					"            tokens = input_string.split()  # tokenize the text by splitting on whitespace\r\n",
					"            num_tokens = len(tokens)  # count the number of tokens\r\n",
					"            print(\"Number of Batch Output Tokens: \", num_tokens)\r\n",
					"\r\n",
					"        print(\"Abstractive Summary\")\r\n",
					"\r\n",
					"        # Create one abstractive summary using the collection of abstractive summaries created above\r\n",
					"        p = 'Summarize the main idea of the following text. ' + input_string\r\n",
					"\r\n",
					"        response = openai.Completion.create(\r\n",
					"        engine=\"SummaryDivinci003\",\r\n",
					"        prompt = p,\r\n",
					"        temperature=0.3,\r\n",
					"        max_tokens=250,\r\n",
					"        top_p=1,\r\n",
					"        frequency_penalty=0,\r\n",
					"        presence_penalty=0,\r\n",
					"        best_of=1,\r\n",
					"        stop=None)\r\n",
					"    \r\n",
					"        final_ab_summarization = response['choices'][0]['text']\r\n",
					"        #print(response['choices'][0]['text'])\r\n",
					"        print(final_ab_summarization)\r\n",
					"        print('Character Length:', len(final_ab_summarization))\r\n",
					"\r\n",
					"        # Put the meta abstractive summary into a data frame and return the data frame object \r\n",
					"        return(spark.createDataFrame([(topic, final_ab_summarization)], schema))\r\n",
					"    \r\n",
					"    else:\r\n",
					"        return(spark.createDataFrame([topic, 'No Data'], schema)) "
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Test on whole dataset"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_all = QueryDataSQLPool(\"select * from Sent.NATO_Sentiment\")\r\n",
					"#df_all.count()"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#topic_all_summary = Abstractive_Summarization(dataframe = df_all, topic=5)\r\n",
					"#display(topic_all_summary)"
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Topic 0 Summary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_topic0 = QueryDataSQLPool(\"select * from \" + senttable + \" where topic = 0\")\r\n",
					"df_topic0.count()"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"topic0_summary = Abstractive_Summarization(dataframe = df_topic0, topic=0)\r\n",
					"display(topic0_summary)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"time.sleep(180)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Topic 1 Summary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_topic1 = QueryDataSQLPool(\"select * from \" + senttable + \" where topic = 1\")\r\n",
					"df_topic1.count()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"topic1_summary = Abstractive_Summarization(dataframe = df_topic1, topic=1)\r\n",
					"display(topic1_summary)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"time.sleep(180)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_topic2 = QueryDataSQLPool(\"select * from \" + senttable + \" where topic = 2\")\r\n",
					"df_topic2.count()"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"topic2_summary = Abstractive_Summarization(dataframe = df_topic2, topic=2)\r\n",
					"display(topic2_summary)"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"time.sleep(180)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Topic 3 Summary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_topic3 = QueryDataSQLPool(\"select * from \" + senttable + \" where topic = 3\")\r\n",
					"df_topic3.count()"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"topic3_summary = Abstractive_Summarization(dataframe = df_topic3, topic=3)\r\n",
					"display(topic3_summary)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"time.sleep(180)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Topic 4 Summary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_topic4 = QueryDataSQLPool(\"select * from \" + senttable + \" where topic = 4\")\r\n",
					"df_topic4.count()"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"topic4_summary = Abstractive_Summarization(dataframe = df_topic4, topic=4)\r\n",
					"display(topic4_summary)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# union the dataframes\r\n",
					"Topic_Summary_df = topic0_summary.union(topic1_summary).union(topic2_summary).union(topic3_summary).union(topic4_summary)\r\n",
					"display(Topic_Summary_df)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write Spark Dataframe to Dedicated SQL Pool Table [sum].[NATO_Abstractive_Sum]\r\n",
					"# First, create the table in the Dedicated SQL Pool 'SQLPoolTest' using the code below\r\n",
					"~~~\r\n",
					"CREATE TABLE [sum].[NATO_Abstractive_Sum]\r\n",
					"(\r\n",
					"    [abstractive_summary] NVARCHAR(4000) NULL,\r\n",
					"    [topic] SMALLINT NULL\r\n",
					")\r\n",
					"\r\n",
					"GO"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create the three-part table name to which data will be written"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outputtable = \"SQLPoolTest.\" + table"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write using AAD Auth to internal table\r\n",
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"\r\n",
					"# Configure and submit the request to write to Synapse Dedicated SQL Pool\r\n",
					"# Sample below is using AAD-based authentication approach; See further examples to leverage SQL Basic auth.\r\n",
					"(Topic_Summary_df.write\r\n",
					" # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					" # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					" .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					" # Like-wise, if `Constants.TEMP_FOLDER` is not provided, the connector will use the runtime staging directory config (see section on Configuration Options for details).\r\n",
					" .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					" # Choose a save mode that is apt for your use case.\r\n",
					" # Options for save modes are \"error\" or \"errorifexists\" (default), \"overwrite\", \"append\", \"ignore\".\r\n",
					" # refer to https://spark.apache.org/docs/latest/sql-data-sources-load-save-functions.html#save-modes\r\n",
					" .mode(\"overwrite\")\r\n",
					" # Required parameter - Three-part table name to which data will be written\r\n",
					" .synapsesql(outputtable))"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}