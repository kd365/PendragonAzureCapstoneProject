{
	"name": "CognitiveServices_Sentiment_UsingParms",
	"properties": {
		"folder": {
			"name": "NLP"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolLarge",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca4b1eb8-e29f-4b0b-b098-3dd69ef5257d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolLarge",
				"name": "SparkPoolLarge",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolLarge",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a variable for the output SQL Pool table name\r\n",
					"Enter a default place holder name which will be changed by the pipeline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"table = \"Sent.NATO_Sentiment\"\n",
					"topictable = \"Topic.NATO_Topics\"\n",
					"\n",
					"#table = \"Sent.Aithusa_Sentiment\"\n",
					"#topictable = \"Topic.Aithusa_Topics\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read from a query\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\n",
					"df = (spark.read\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\n",
					"                     # Defaults to storage path defined in the runtime configurations\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\n",
					"                     # query from which data will be read\n",
					"                     .option(Constants.QUERY, \"select * from \"+topictable)\n",
					"                     .synapsesql()\n",
					")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sort by created_at and sample if needed for testing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Select sample size for testing\r\n",
					"\r\n",
					"# Sort ascending by 'created_at'\r\n",
					"from pyspark.sql.functions import desc\r\n",
					"\r\n",
					"df = df.orderBy(desc(\"created_at\"))\r\n",
					"\r\n",
					"# select the first 100 records\r\n",
					"#df = df.limit(2000)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.count()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import synapse.ml\r\n",
					"from synapse.ml.cognitive import *\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Assign Linked Cognitive Service"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"linked_service_name = \"CognitiveService1\""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"id\",  LongType(), True),\r\n",
					"    StructField(\"created_at\", TimestampType(), True),\r\n",
					"    StructField(\"text\", StringType(), True),\r\n",
					"    StructField(\"lang\", StringType(), True),\r\n",
					"    StructField(\"retweet_count\", IntegerType(), True),\r\n",
					"    StructField(\"reply_count\", IntegerType(), True),\r\n",
					"    StructField(\"like_count\", IntegerType(), True),\r\n",
					"    StructField(\"quote_count\", IntegerType(), True),\r\n",
					"    StructField(\"impression_count\", IntegerType(), True),\r\n",
					"    StructField(\"cleantext\", StringType(), True),\r\n",
					"    StructField(\"topic_0_confidence\", FloatType(), True),\r\n",
					"    StructField(\"topic_1_confidence\", FloatType(), True),\r\n",
					"    StructField(\"topic_2_confidence\", FloatType(), True),\r\n",
					"    StructField(\"topic_3_confidence\", FloatType(), True),\r\n",
					"    StructField(\"topic_4_confidence\", FloatType(), True),\r\n",
					"    StructField(\"topic\", ShortType(), True),\r\n",
					"    StructField(\"sentiment\", StringType(), True),\r\n",
					"    StructField(\"negative_score\", FloatType(), True),\r\n",
					"    StructField(\"positive_score\", FloatType(), True),\r\n",
					"    StructField(\"neutral_score\", FloatType(), True),\r\n",
					"    StructField(\"mixed_score\", FloatType(), True)\r\n",
					"])"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Perform Sentiment Analysis in Batches"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# import required libraries\r\n",
					"import json\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit\r\n",
					"import pyspark.sql.functions as F\r\n",
					"import collections\r\n",
					"\r\n",
					"# Batch size\r\n",
					"batch_size = 1000\r\n",
					"print('Batch size: ', batch_size)\r\n",
					"\r\n",
					"# First, count the total number of rows in the DataFrame\r\n",
					"num_rows = df.count()\r\n",
					"\r\n",
					"# Next, calculate the number of batches needed to split the DataFrame into batches of equal to the batch_size\r\n",
					"num_batches = int(num_rows / batch_size) + (num_rows % batch_size > 0)\r\n",
					"print('Number of batches: ', num_batches)\r\n",
					"\r\n",
					"# Then, use randomSplit to split the DataFrame into smaller DataFrames of equal size\r\n",
					"df_batches = df.randomSplit([1.0]*num_batches, seed=42)\r\n",
					"\r\n",
					"# create a DataFrame\r\n",
					"sentiment_output_df =  spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"num = 1\r\n",
					"\r\n",
					"# Finally, use limit to limit the number of rows in each DataFrame to 5\r\n",
					"for i in range(num_batches):\r\n",
					"    batch = df_batches[i].limit(batch_size)\r\n",
					"    print('Length of batch: ', batch.count())\r\n",
					"    sent = (TextSentiment()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setTextCol(\"cleantext\")\r\n",
					"    .setOutputCol(\"sentiment\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"    sent_batch_output = sent.transform(batch)\r\n",
					"\r\n",
					"    # Remove rows with error\r\n",
					"    sent_batch_output = sent_batch_output.filter(col(\"error\").isNull())\r\n",
					"\r\n",
					"\r\n",
					"    #Create new columns based on response JSON\r\n",
					"    sent_batch_output = sent_batch_output.withColumn(\"sentiment1\", col(\"sentiment.document.sentiment\"))\r\n",
					"    sent_batch_output = sent_batch_output.withColumn(\"negative_score\", coalesce(col(\"sentiment.document.confidenceScores.negative\"), lit(0.0)))\r\n",
					"    sent_batch_output = sent_batch_output.withColumn(\"positive_score\", coalesce(col(\"sentiment.document.confidenceScores.positive\"), lit(0.0)))\r\n",
					"    sent_batch_output = sent_batch_output.withColumn(\"neutral_score\", coalesce(col(\"sentiment.document.confidenceScores.neutral\"), lit(0.0)))\r\n",
					"    sent_batch_output = sent_batch_output.withColumn(\"mixed_score\", lit(0.0))\r\n",
					"\r\n",
					"    # Remove output columns\r\n",
					"    sent_batch_output = sent_batch_output.drop(\"sentiment\")\r\n",
					"    sent_batch_output = sent_batch_output.drop(\"error\")\r\n",
					"    # Renamed sentiment column\r\n",
					"    sent_batch_output = sent_batch_output.withColumnRenamed(\"sentiment1\", \"sentiment\")\r\n",
					"\r\n",
					"    #print(sent_batch_output.printSchema)\r\n",
					"    #display(sent_batch_output)\r\n",
					"\r\n",
					"    # Append the batch results dataframe to the main output dataframe\r\n",
					"    sentiment_output_df = sentiment_output_df.union(sent_batch_output)\r\n",
					"    print('Batch', num, 'succeeded!')\r\n",
					"    num = num + 1\r\n",
					"\r\n",
					"#display(sentiment_output_df)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# change the data types\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"impression_count\", col(\"impression_count\").cast(\"int\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic\", col(\"topic\").cast(\"smallint\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic_0_confidence\", col(\"topic_0_confidence\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic_1_confidence\", col(\"topic_1_confidence\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic_2_confidence\", col(\"topic_2_confidence\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic_3_confidence\", col(\"topic_3_confidence\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"topic_4_confidence\", col(\"topic_4_confidence\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"negative_score\", col(\"negative_score\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"positive_score\", col(\"positive_score\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"neutral_score\", col(\"neutral_score\").cast(\"float\"))\r\n",
					"sentiment_output_df = sentiment_output_df.withColumn(\"mixed_score\", col(\"mixed_score\").cast(\"float\"))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reorder columns to match SQL table column order\r\n",
					"from pyspark.sql.functions import col\r\n",
					"# Reorder columns and column data\r\n",
					"sentiment_output_df = sentiment_output_df.select(col(\"id\"), col(\"created_at\"), col(\"text\"), col(\"cleantext\"), col(\"lang\"), col(\"retweet_count\"), col(\"reply_count\"), col(\"like_count\"), col(\"quote_count\"), col(\"impression_count\"), col(\"topic\"), col(\"topic_0_confidence\"), col(\"topic_1_confidence\"), col(\"topic_2_confidence\"), col(\"topic_3_confidence\"), col(\"topic_4_confidence\"), col(\"sentiment\"), col(\"negative_score\"), col(\"positive_score\"), col(\"neutral_score\"), col(\"mixed_score\"))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write Spark Dataframe to Dedicated SQL Pool Table [Sent].[NATO_Sentiment]\r\n",
					"# First, create the table in the Dedicated SQL Pool 'SQLPoolTest' using the code below\r\n",
					"~~~\r\n",
					"CREATE TABLE [Sent].[NATO_Sentiment]\r\n",
					"(\r\n",
					"    [id] bigint  NULL,\r\n",
					"\t[created_at] DATETIME2(7)  NULL,\r\n",
					"\t[text] NVARCHAR(4000)  NULL,\r\n",
					"\t[cleantext] NVARCHAR(4000)  NULL,\r\n",
					"\t[lang] nvarchar(10)  NULL,\r\n",
					"\t[retweet_count] INT  NULL,\r\n",
					"\t[reply_count] INT  NULL,\r\n",
					"\t[like_count] INT  NULL,\r\n",
					"\t[quote_count] INT  NULL,\r\n",
					"\t[impression_count] INT  NULL,\r\n",
					"    [topic] SMALLINT NULL,\r\n",
					"    [topic_0_confidence] REAL NULL,\r\n",
					"    [topic_1_confidence] REAL NULL,\r\n",
					"    [topic_2_confidence] REAL NULL,\r\n",
					"    [topic_3_confidence] REAL NULL,\r\n",
					"    [topic_4_confidence] REAL NULL,\r\n",
					"    [sentiment] NVARCHAR(20) NULL,\r\n",
					"    [negative_score] REAL NULL,\r\n",
					"    [positive_score] REAL NULL,\r\n",
					"    [neutral_score] REAL NULL,\r\n",
					"    [mixed_score] REAL NULL\r\n",
					")\r\n",
					"\r\n",
					"GO"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create the three-part table name to which data will be written"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outputtable = \"SQLPoolTest.\" + table"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write using AAD Auth to internal table\r\n",
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"\r\n",
					"# Configure and submit the request to write to Synapse Dedicated SQL Pool\r\n",
					"# Sample below is using AAD-based authentication approach; See further examples to leverage SQL Basic auth.\r\n",
					"(sentiment_output_df.write\r\n",
					" # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					" # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					" .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					" # Like-wise, if `Constants.TEMP_FOLDER` is not provided, the connector will use the runtime staging directory config (see section on Configuration Options for details).\r\n",
					" .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					" # Choose a save mode that is apt for your use case.\r\n",
					" # Options for save modes are \"error\" or \"errorifexists\" (default), \"overwrite\", \"append\", \"ignore\".\r\n",
					" # refer to https://spark.apache.org/docs/latest/sql-data-sources-load-save-functions.html#save-modes\r\n",
					" .mode(\"overwrite\")\r\n",
					" # Required parameter - Three-part table name to which data will be written\r\n",
					" .synapsesql(outputtable))"
				],
				"execution_count": 29
			}
		]
	}
}