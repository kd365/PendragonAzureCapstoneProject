{
	"name": "CognitiveServices",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolTest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "695c0d42-182c-4d4d-bad7-534ced794e45"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolTest",
				"name": "SparkPoolTest",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolTest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\r\n",
					"\r\n",
					"# Read from a query\r\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\r\n",
					"df = (spark.read\r\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\r\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\r\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					"                     # Defaults to storage path defined in the runtime configurations\r\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					"                     # query from which data will be read\r\n",
					"                     .option(Constants.QUERY, \"select * from dbo.NATO_Tweets1\")\r\n",
					"                     .synapsesql()\r\n",
					")"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import synapse.ml\r\n",
					"from synapse.ml.cognitive import *\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"linked_service_name = \"CognitiveService1\""
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Create a dataframe that's tied to it's column names\r\n",
					"df = spark.createDataFrame([\r\n",
					"  (\"Hello World\",),\r\n",
					"  (\"Bonjour tout le monde\",),\r\n",
					"  (\"La carretera estaba atascada. Había mucho tráfico el día de ayer.\",),\r\n",
					"  (\"你好\",),\r\n",
					"  (\"こんにちは\",),\r\n",
					"  (\":) :( :D\",)\r\n",
					"], [\"text\",])\r\n",
					"\r\n",
					"# Run the Text Analytics service with options\r\n",
					"language = (LanguageDetector()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setTextCol(\"text\")\r\n",
					"    .setOutputCol(\"language\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"# Show the results of your text query in a table format\r\n",
					"display(language.transform(df))"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.createDataFrame([\r\n",
					"    (\"1\", \"Microsoft released Windows 10\"),\r\n",
					"    (\"2\", \"In 1975, Bill Gates III and Paul Allen founded the company.\")\r\n",
					"], [\"if\", \"text\"])\r\n",
					"\r\n",
					"entity = (EntityDetector()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguage(\"en\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"#display(entity.transform(df))\r\n",
					"display(entity.transform(df).select(\"if\", \"text\", col(\"replies\")['document'].getItem(\"entities\").alias(\"entities\")))"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.createDataFrame([\r\n",
					"    (\"en\", \"Hello world. This is some input text that I love.\"),\r\n",
					"    (\"fr\", \"Bonjour tout le monde\"),\r\n",
					"    (\"es\", \"La carretera estaba atascada. Había mucho tráfico el día de ayer.\")\r\n",
					"], [\"lang\", \"text\"])\r\n",
					"\r\n",
					"keyPhrase = (KeyPhraseExtractor()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguageCol(\"lang\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"display(keyPhrase.transform(df).select(\"text\", col(\"replies\")['document'].getItem(\"keyPhrases\").alias(\"keyPhrases\")))"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.createDataFrame([\r\n",
					"    (\"1\", \"en\", \"I had a wonderful trip to Seattle last week.\"),\r\n",
					"    (\"2\", \"en\", \"I visited Space Needle 2 times.\")\r\n",
					"], [\"id\", \"language\", \"text\"])\r\n",
					"\r\n",
					"ner = (NER()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguageCol(\"language\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"display(ner.transform(df).select(\"text\", col(\"replies\")['document'].getItem(\"entities\").alias(\"entities\")))"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Create a dataframe that's tied to it's column names\r\n",
					"df_sentences = spark.createDataFrame([\r\n",
					"  (\"I am so happy today, its sunny!\", \"en-US\"), \r\n",
					"  (\"this is a dog\", \"en-US\"), \r\n",
					"  (\"I am frustrated by this rush hour traffic!\", \"en-US\") \r\n",
					"], [\"text\", \"language\"])\r\n",
					"\r\n",
					"# Run the Text Analytics service with options\r\n",
					"sentiment = (TextSentiment()\r\n",
					"    .setTextCol(\"text\")\r\n",
					"    .setLocation(\"eastasia\") # Set the location of your cognitive service\r\n",
					"    .setSubscriptionKey(linked_service_name)\r\n",
					"    .setOutputCol(\"sentiment\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setLanguageCol(\"language\"))\r\n",
					"\r\n",
					"# Show the results of your text query in a table format\r\n",
					"\r\n",
					"display(sentiment.transform(df_sentences).select(\"text\", col(\"sentiment\")['document'].getItem(\"sentiment\").alias(\"sentiment\")))"
				],
				"execution_count": 86
			}
		]
	}
}