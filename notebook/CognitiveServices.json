{
	"name": "CognitiveServices",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPoolTest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6d368ca9-a6f8-4419-99aa-2d3032375466"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/57cd2ff8-9306-41d0-9cad-c2052a0a8381/resourceGroups/Spring2023-TeamPendragon/providers/Microsoft.Synapse/workspaces/pendragon-synapse/bigDataPools/SparkPoolTest",
				"name": "SparkPoolTest",
				"type": "Spark",
				"endpoint": "https://pendragon-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPoolTest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"# Database can be specified as a Spark Config or as a Constant - Constants.DATABASE\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"SQLPoolTest\")\r\n",
					"\r\n",
					"# Read from a query\r\n",
					"# Query can be provided either as an argument to synapsesql or as a Constant - Constants.QUERY\r\n",
					"df = (spark.read\r\n",
					"                     # Name of the SQL Dedicated Pool or database where to run the query\r\n",
					"                     # Database can be specified as a Spark Config - spark.sqlanalyticsconnector.dw.database or as a Constant - Constants.DATABASE\r\n",
					"                     .option(Constants.DATABASE, \"SQLPoolTest\")\r\n",
					"                     # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
					"                     # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
					"                     .option(Constants.SERVER, \"pendragon-synapse.sql.azuresynapse.net\")\r\n",
					"                     # Defaults to storage path defined in the runtime configurations\r\n",
					"                     .option(Constants.TEMP_FOLDER, \"abfss://pendragon@pendragon.dfs.core.windows.net/NotebookStaging\")\r\n",
					"                     # query from which data will be read\r\n",
					"                     .option(Constants.QUERY, \"select * from dbo.NATO_Tweets1\")\r\n",
					"                     .synapsesql()\r\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Key Phrase Extraction, Named Entity Recognition, Sentiment Analysis"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Select sample size for testing\r\n",
					"\r\n",
					"# Sort ascending by 'created_at'\r\n",
					"from pyspark.sql.functions import desc\r\n",
					"\r\n",
					"sorted_df = df.orderBy(desc(\"created_at\"))\r\n",
					"\r\n",
					"\r\n",
					"# select the first 20 records\r\n",
					"first_20 = sorted_df.limit(20)\r\n",
					"first_20.show()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import regexp_replace\r\n",
					"\r\n",
					"# Define the regular expression pattern to match words starting with @, &, or https\r\n",
					"regex = r'@\\w+|&\\w+|https?://\\S+|#\\w+'\r\n",
					"\r\n",
					"# Apply the regexp_replace function to the text column and create a new column with the filtered text\r\n",
					"df_filtered = first_20.withColumn(\"cleanText\", regexp_replace(col(\"text\"), regex, ''))\r\n",
					"\r\n",
					"# Show the filtered DataFrame\r\n",
					"df_filtered.select(\"cleanText\").show()\r\n",
					"\r\n",
					"first_20 = df_filtered"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import synapse.ml\r\n",
					"from synapse.ml.cognitive import *\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(dir(synapse.ml.cognitive))"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"linked_service_name = \"CognitiveService1\""
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sentiment"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sent = (TextSentiment()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setOutputCol(\"sentiment\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"    \r\n",
					"sent_output = sent.transform(first_20)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sent_output.select(\"sentiment\").show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Convert the output to a JSON format and extract the sentiment of each text record into an array"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"\r\n",
					"# Extract the 'sentiment' column and convert it to JSON\r\n",
					"json_output = sent_output.select(\"sentiment\").toJSON().collect()\r\n",
					"\r\n",
					"# Deserialize the JSON and extract the 'sentiment' field\r\n",
					"sentiments = [json.loads(x)[\"sentiment\"] for x in json_output]\r\n",
					"\r\n",
					"output = []\r\n",
					"\r\n",
					"# Print the 'sentiment' field for each row\r\n",
					"for sentiment in sentiments:\r\n",
					"    #print(sentiment)\r\n",
					"    output.append(sentiment['document']['sentiment'])\r\n",
					"\r\n",
					"print(output)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Calculate the overall sentiment and the confidence scores"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import collections\r\n",
					"\r\n",
					"# Count the occurrences of each value in the array\r\n",
					"counts = collections.Counter(output)\r\n",
					"\r\n",
					"# Get the most common value and its count\r\n",
					"most_common = counts.most_common(1)[0]\r\n",
					"most_common_value = most_common[0]\r\n",
					"most_common_count = most_common[1]\r\n",
					"\r\n",
					"print(\"Most common value:\", most_common_value)\r\n",
					"print(\"Count:\", most_common_count)\r\n",
					"\r\n",
					"confidence_scores = {}\r\n",
					"\r\n",
					"total_values = len(output)\r\n",
					"\r\n",
					"for value, count in counts.items():\r\n",
					"    confidence_scores[value] = count / total_values\r\n",
					"\r\n",
					"print(\"Confidence scores:\", confidence_scores)\r\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity Extraction"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# import required libraries\r\n",
					"import json\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"\r\n",
					"# First, count the total number of rows in the DataFrame\r\n",
					"num_rows = first_20.count()\r\n",
					"\r\n",
					"# Next, calculate the number of batches needed to split the DataFrame into batches of 5\r\n",
					"num_batches = int(num_rows / 5) + (num_rows % 5 > 0)\r\n",
					"\r\n",
					"# Then, use randomSplit to split the DataFrame into smaller DataFrames of equal size\r\n",
					"df_batches = first_20.randomSplit([1.0]*num_batches, seed=42)\r\n",
					"\r\n",
					"# define the schema for the output DataFrame\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"entity_name\", StringType(), True),\r\n",
					"    StructField(\"entity_url\", StringType(), True)\r\n",
					"    ])\r\n",
					"\r\n",
					"# create an empty DataFrame with the defined schema\r\n",
					"output_df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Finally, use limit to limit the number of rows in each DataFrame to 5\r\n",
					"for i in range(num_batches):\r\n",
					"    batch = df_batches[i].limit(5)\r\n",
					"    entity = (EntityDetector()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguage(\"en\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"    ent_batch_output = entity.transform(batch)\r\n",
					"    #display(ent_batch_output)\r\n",
					"\r\n",
					"    # Extract the 'replies' column and convert it to JSON\r\n",
					"    json_output = ent_batch_output.select(\"replies\").toJSON().collect()\r\n",
					"\r\n",
					"    # Deserialize the JSON and extract the 'replies' field\r\n",
					"    ents = [json.loads(x)[\"replies\"] for x in json_output]\r\n",
					"\r\n",
					"    # Print the 'replies' field for each row\r\n",
					"    for each in ents:\r\n",
					"        #print(each)\r\n",
					"        # create a PySpark DataFrame from the JSON string\r\n",
					"        json_string = each\r\n",
					"        df = spark.read.json(sc.parallelize([json_string]))\r\n",
					"\r\n",
					"        # extract the 'entities' array from the 'document' column\r\n",
					"        df = df.selectExpr('explode(document.entities) as entities')\r\n",
					"\r\n",
					"        # select the 'text' and 'category' fields from the exploded 'entities' array\r\n",
					"        df = df.select('entities.name', 'entities.url')\r\n",
					"\r\n",
					"        # rename the columns\r\n",
					"        df = df.withColumnRenamed('text', 'entity_name')\r\n",
					"        df = df.withColumnRenamed('category', 'entity_url')\r\n",
					"\r\n",
					"        # show the resulting DataFrame\r\n",
					"        #df.show()\r\n",
					"\r\n",
					"        # Append the batch results dataframe to the main output dataframe\r\n",
					"        output_df = output_df.union(df)\r\n",
					"display(output_df)"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Key Phrase Extractor"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"keyPhrase = (KeyPhraseExtractor()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguageCol(\"lang\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"keyphrase_output = keyPhrase.transform(first_20)\r\n",
					"display(keyPhrase.transform(first_20))"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Convert output to a JSON and collect the results into one array"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"\r\n",
					"# Extract the 'sentiment' column and convert it to JSON\r\n",
					"json_output = keyphrase_output.select(\"replies\").toJSON().collect()\r\n",
					"\r\n",
					"# Deserialize the JSON and extract the 'sentiment' field\r\n",
					"keyphrases = [json.loads(x)[\"replies\"] for x in json_output]\r\n",
					"\r\n",
					"kp_output = []\r\n",
					"\r\n",
					"# Print the 'sentiment' field for each row\r\n",
					"for each in keyphrases:\r\n",
					"    #print(each)\r\n",
					"    for keyphrase in each['document']['keyPhrases']:\r\n",
					"        kp_output.append(keyphrase)\r\n",
					"\r\n",
					"print(kp_output)"
				],
				"execution_count": 79
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Create a dataframe for the key phrases and their count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a PySpark DataFrame from the array\r\n",
					"kp_df = spark.createDataFrame([(i, 1) for i in kp_output], ['text', 'count'])\r\n",
					"\r\n",
					"# Group by 'text' column and sum the 'count' column to get the count of each unique text\r\n",
					"kp_df = kp_df.groupBy('text').agg({'count': 'sum'})\r\n",
					"\r\n",
					"# Sort the DataFrame by the 'count' column in descending order\r\n",
					"kp_df = kp_df.sort(col('sum(count)').desc())\r\n",
					"\r\n",
					"# Show the resulting DataFrame\r\n",
					"display(kp_df)"
				],
				"execution_count": 80
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Named Entity Recognition"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# import required libraries\r\n",
					"import json\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"\r\n",
					"# First, count the total number of rows in the DataFrame\r\n",
					"num_rows = first_20.count()\r\n",
					"\r\n",
					"# Next, calculate the number of batches needed to split the DataFrame into batches of 5\r\n",
					"num_batches = int(num_rows / 5) + (num_rows % 5 > 0)\r\n",
					"\r\n",
					"# Then, use randomSplit to split the DataFrame into smaller DataFrames of equal size\r\n",
					"df_batches = first_20.randomSplit([1.0]*num_batches, seed=42)\r\n",
					"\r\n",
					"# define the schema for the output DataFrame\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"entity_text\", StringType(), True),\r\n",
					"    StructField(\"entity_category\", StringType(), True)\r\n",
					"    ])\r\n",
					"\r\n",
					"# create an empty DataFrame with the defined schema\r\n",
					"output_df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Finally, use limit to limit the number of rows in each DataFrame to 5\r\n",
					"for i in range(num_batches):\r\n",
					"    batch = df_batches[i].limit(5)\r\n",
					"    ner = (NER()\r\n",
					"    .setLinkedService(linked_service_name)\r\n",
					"    .setLanguageCol(\"lang\")\r\n",
					"    .setOutputCol(\"replies\")\r\n",
					"    .setErrorCol(\"error\"))\r\n",
					"\r\n",
					"    ner_batch_output = ner.transform(batch)\r\n",
					"    #display(ner_batch_output)\r\n",
					"\r\n",
					"    # Extract the 'replies' column and convert it to JSON\r\n",
					"    json_output = ner_batch_output.select(\"replies\").toJSON().collect()\r\n",
					"\r\n",
					"    # Deserialize the JSON and extract the 'replies' field\r\n",
					"    nes = [json.loads(x)[\"replies\"] for x in json_output]\r\n",
					"\r\n",
					"    # Print the 'replies' field for each row\r\n",
					"    for each in nes:\r\n",
					"        #print(each)\r\n",
					"\r\n",
					"        # create a PySpark DataFrame from the JSON string\r\n",
					"        json_string = each\r\n",
					"        df = spark.read.json(sc.parallelize([json_string]))\r\n",
					"\r\n",
					"        # extract the 'entities' array from the 'document' column\r\n",
					"        df = df.selectExpr('explode(document.entities) as entities')\r\n",
					"\r\n",
					"        # select the 'text' and 'category' fields from the exploded 'entities' array\r\n",
					"        df = df.select('entities.text', 'entities.category')\r\n",
					"\r\n",
					"        # rename the columns\r\n",
					"        df = df.withColumnRenamed('text', 'entity_text')\r\n",
					"        df = df.withColumnRenamed('category', 'entity_category')\r\n",
					"\r\n",
					"        # show the resulting DataFrame\r\n",
					"        #df.show()\r\n",
					"\r\n",
					"        # Append the batch results dataframe to the main output dataframe\r\n",
					"        output_df = output_df.union(df)\r\n",
					"display(output_df)"
				],
				"execution_count": 76
			}
		]
	}
}